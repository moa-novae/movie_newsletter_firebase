{"version":3,"sources":["../../src/db/test.js"],"names":["exampleDataTwo","db","citiesRef","collection","setSf","doc","set","name","state","country","capital","population","setLa","Promise","all","getDocument","cityRef","getDoc","get","then","data","console","log","catch","err","deleteTestDocuments","testData","querySnapshot","forEach","ref","delete","postDeleteSnapshot","exists","test"],"mappings":";;AAAA;;;;;;AAEA,SAASA,cAAT,CAAwBC,EAAxB,EAA4B;AAC1B;AACA,MAAMC,SAAS,GAAGD,EAAE,CAACE,UAAH,CAAc,QAAd,CAAlB;AAEA,MAAIC,KAAK,GAAGF,SAAS,CAACG,GAAV,CAAc,IAAd,EAAoBC,GAApB,CAAwB;AAClCC,IAAAA,IAAI,EAAE,eAD4B;AAElCC,IAAAA,KAAK,EAAE,IAF2B;AAGlCC,IAAAA,OAAO,EAAE,KAHyB;AAIlCC,IAAAA,OAAO,EAAE,KAJyB;AAKlCC,IAAAA,UAAU,EAAE;AALsB,GAAxB,CAAZ;AAOA,MAAIC,KAAK,GAAGV,SAAS,CAACG,GAAV,CAAc,IAAd,EAAoBC,GAApB,CAAwB;AAClCC,IAAAA,IAAI,EAAE,aAD4B;AAElCC,IAAAA,KAAK,EAAE,IAF2B;AAGlCC,IAAAA,OAAO,EAAE,KAHyB;AAIlCC,IAAAA,OAAO,EAAE,KAJyB;AAKlCC,IAAAA,UAAU,EAAE;AALsB,GAAxB,CAAZ,CAX0B,CAkB1B;;AACA,SAAOE,OAAO,CAACC,GAAR,CAAY,CAACV,KAAD,EAAQQ,KAAR,CAAZ,CAAP;AACD;;AAED,SAASG,WAAT,CAAqBd,EAArB,EAAyB;AACvB;AACA,MAAIe,OAAO,GAAGf,EAAE,CAACE,UAAH,CAAc,QAAd,EAAwBE,GAAxB,CAA4B,IAA5B,CAAd;AACA,MAAIY,MAAM,GAAGD,OAAO,CACjBE,GADU,GAEVC,IAFU,CAEJd,GAAD,IAAS;AACb,QAAIA,GAAG,CAACe,IAAJ,GAAWb,IAAX,KAAoB,eAAxB,EAAyC;AACvCc,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,KAFD,MAEO;AACLD,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD;AACF,GARU,EASVC,KATU,CASHC,GAAD,IAAS;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCE,GAAtC;AACD,GAXU,CAAb,CAHuB,CAevB;;AAEA,SAAOP,MAAP;AACD;;SAEcQ,mB;;;;;2CAAf,WAAmCxB,EAAnC,EAAuC;AACrC,QAAMyB,QAAQ,GAAGzB,EAAE,CAACE,UAAH,CAAc,QAAd,CAAjB;AACA,QAAMwB,aAAa,SAASD,QAAQ,CAACR,GAAT,EAA5B;AACAS,IAAAA,aAAa,CAACC,OAAd,CAAsB,UAAUvB,GAAV,EAAe;AACnCA,MAAAA,GAAG,CAACwB,GAAJ,CAAQC,MAAR;AACD,KAFD;AAGA,QAAMC,kBAAkB,SAASL,QAAQ,CAACR,GAAT,EAAjC;;AACA,QAAI,CAACa,kBAAkB,CAACC,MAAxB,EAAgC;AAC9BX,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,KAFD,MAEO;AACLD,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;AACF,G;;;;AAED;AAAA,gCAAC,WAAoBrB,EAApB,EAAwB;AACvB,UAAMD,cAAc,CAACC,EAAD,CAApB;AACA,UAAMc,WAAW,CAACd,EAAD,CAAjB;AACA,UAAMwB,mBAAmB,CAACxB,EAAD,CAAzB;AACD,GAJD;;AAAA,WAAgBgC,IAAhB;AAAA;AAAA;;AAAA,SAAgBA,IAAhB;AAAA,KAIGhC,cAJH","sourcesContent":["import { db } from \"./initialize\";\n\nfunction exampleDataTwo(db) {\n  // [START example_data_two]\n  const citiesRef = db.collection(\"cities\");\n\n  let setSf = citiesRef.doc(\"SF\").set({\n    name: \"San Francisco\",\n    state: \"CA\",\n    country: \"USA\",\n    capital: false,\n    population: 860000,\n  });\n  let setLa = citiesRef.doc(\"LA\").set({\n    name: \"Los Angeles\",\n    state: \"CA\",\n    country: \"USA\",\n    capital: false,\n    population: 3900000,\n  });\n  // [END example_data_two]\n  return Promise.all([setSf, setLa]);\n}\n\nfunction getDocument(db) {\n  // [START get_document]\n  let cityRef = db.collection(\"cities\").doc(\"SF\");\n  let getDoc = cityRef\n    .get()\n    .then((doc) => {\n      if (doc.data().name === \"San Francisco\") {\n        console.log(\"Test data saved!\");\n      } else {\n        console.log(\"Something went wrong\");\n      }\n    })\n    .catch((err) => {\n      console.log(\"Error getting document\", err);\n    });\n  // [END get_document]\n\n  return getDoc;\n}\n\nasync function deleteTestDocuments(db) {\n  const testData = db.collection(\"cities\");\n  const querySnapshot = await testData.get();\n  querySnapshot.forEach(function (doc) {\n    doc.ref.delete();\n  });\n  const postDeleteSnapshot = await testData.get();\n  if (!postDeleteSnapshot.exists) {\n    console.log(\"Test data is deleted!\");\n  } else {\n    console.log(\"Test data is not deleted\");\n  }\n}\n\n(async function test(db) {\n  await exampleDataTwo(db);\n  await getDocument(db);\n  await deleteTestDocuments(db);\n})(db);\n"],"file":"test.js"}