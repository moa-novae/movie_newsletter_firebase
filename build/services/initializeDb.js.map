{"version":3,"sources":["../../src/services/initializeDb.js"],"names":["initializeGenres","output","axios","get","process","env","tmdbKey","data","genres","e","console","log","initializeMonthlyMovies","fetchAdditionalMovieInfo","id","pageNumber","movies","totalPages","movie","results","push","moviesAfterPageOne","i","then","Promise","allSettled","movieObjs","map","additionalInfo","value","initializeUsers","initializeTopMovies","topMoviesPromise","all","movieArr","page","movie_id","title","popularity","adult","imagesOfMovies","imagePathRespone","backdrops","imagesOfMovie","entries","image_path","image","file_path"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;SAEeA,gB;;EAYf;;;;wCAZA,aAAkC;AAChC,QAAI;AACF,UAAMC,MAAM,SAASC,eAAMC,GAAN,iEACsCC,OAAO,CAACC,GAAR,CAAYC,OADlD,qBAArB,CADE,CAIF;;AACA,+BAAUL,MAAM,CAACM,IAAP,CAAYC,MAAtB;AACD,KAND,CAME,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,G;;;;SAGcG,uB;;;;;+CAAf,aAAyC;AAAA,aACxBC,wBADwB;AAAA;AAAA,MAOvC;;;AAPuC;AAAA,oDACvC,WAAwCC,EAAxC,EAA4C;AAC1C,YAAMb,MAAM,SAASC,eAAMC,GAAN,oDACgBW,EADhB,sBAC8BV,OAAO,CAACC,GAAR,CAAYC,OAD1C,2BAArB;AAGA,eAAOL,MAAM,CAACM,IAAd;AACD,OANsC;AAAA;AAAA;;AAQvC,QAAI;AAAA;AACF,YAAIQ,UAAU,GAAG,CAAjB;AACA,YAAMC,MAAM,GAAG,EAAf;AACA,YAAMf,MAAM,SAASC,eAAMC,GAAN,+DACoCC,OAAO,CAACC,GAAR,CAAYC,OADhD,iGAC8IS,UAD9I,8EAArB,CAHE,CAMF;;AACA,YAAIE,UAAU,GAAGhB,MAAM,CAACM,IAAP,CAAY,aAAZ,CAAjB,CAPE,CAQF;;AACA,aAAK,IAAIW,KAAT,IAAkBjB,MAAM,CAACM,IAAP,CAAYY,OAA9B,EAAuC;AACrCH,UAAAA,MAAM,CAACI,IAAP,CAAYF,KAAZ;AACD,SAXC,CAaF;;;AACA,YAAMG,kBAAkB,GAAG,EAA3B;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,UAArB,EAAiCK,CAAC,EAAlC,EAAsC;AACpCD,UAAAA,kBAAkB,CAACD,IAAnB,CACElB,eACGC,GADH,+DAE2DC,OAAO,CAACC,GAAR,CAAYC,OAFvE,iGAEqKgB,CAFrK,+EAIGC,IAJH,CAIStB,MAAD,IAAY;AAChB,iBAAK,IAAIiB,MAAT,IAAkBjB,MAAM,CAACM,IAAP,CAAYY,OAA9B,EAAuC;AACrCH,cAAAA,MAAM,CAACI,IAAP,CAAYF,MAAZ;AACD;AACF,WARH,CADF;AAWD;;AACD,cAAMM,OAAO,CAACC,UAAR,CAAmBJ,kBAAnB,CAAN;AACA,YAAMK,SAAS,GAAG,EAAlB,CA7BE,CA8BF;AACA;;AACAF,QAAAA,OAAO,CAACC,UAAR,CACET,MAAM,CAACW,GAAP,CAAYT,KAAD,IACTL,wBAAwB,CAACK,KAAK,CAACJ,EAAP,CAAxB,CAAmCS,IAAnC,CAAyCK,cAAD,oCACnCV,KADmC,GAEnCU,cAFmC,CAAxC,CADF,CADF,EAOEL,IAPF,CAOQP,MAAD,IAAY;AACjB,eAAK,IAAIE,OAAT,IAAkBF,MAAlB,EAA0B;AACxBU,YAAAA,SAAS,CAACN,IAAV,CAAeF,OAAK,CAACW,KAArB;AACD,WAHgB,CAIjB;;;AACA,mCAAUH,SAAV;AACD,SAbD,EAhCE,CA+CF;AA/CE;AAgDH,KAhDD,CAgDE,OAAOjB,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,G;;;;SACcqB,e;;;;;uCAAf,aAAiC;AAC/B,UAAM,4BAAN;AACApB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,G;;;;SACcoB,mB;;;;;2CAAf,aAAqC;AACnC,QAAMC,gBAAgB,GAAG,EAAzB;;AACA,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BU,MAAAA,gBAAgB,CAACZ,IAAjB,CACElB,eAAMC,GAAN,gEAC0DC,OAAO,CAACC,GAAR,CAAYC,OADtE,kCACqGgB,CADrG,EADF;AAKD;;AACD,QAAI;AACF,UAAMrB,MAAM,SAASuB,OAAO,CAACS,GAAR,CAAYD,gBAAZ,CAArB;AACA,UAAME,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAMC,IAAX,IAAmBlC,MAAnB,EAA2B;AACzBiC,QAAAA,QAAQ,CAACd,IAAT,CACE,GAAGe,IAAI,CAAC5B,IAAL,CAAUY,OAAV,CAAkBQ,GAAlB,CAAuBT,KAAD,KAAY;AACnCkB,UAAAA,QAAQ,EAAElB,KAAK,CAACJ,EADmB;AAEnCuB,UAAAA,KAAK,EAAEnB,KAAK,CAACmB,KAFsB;AAGnCC,UAAAA,UAAU,EAAEpB,KAAK,CAACoB,UAHiB;AAInCC,UAAAA,KAAK,EAAErB,KAAK,CAACqB;AAJsB,SAAZ,CAAtB,CADL;AAQD,OAZC,CAaF;;;AACA,UAAMC,cAAc,SAAShB,OAAO,CAACS,GAAR,CAC3BC,QAAQ,CAACP,GAAT;AAAA,qCAAa,WAAOT,KAAP,EAAiB;AAC5B,cAAMuB,gBAAgB,SAASvC,eAAMC,GAAN,8CACSe,KAAK,CAACkB,QADf,6BAC0ChC,OAAO,CAACC,GAAR,CAAYC,OADtD,EAA/B;AAGA,iBAAOmC,gBAAgB,CAAClC,IAAjB,CAAsBmC,SAA7B;AACD,SALD;;AAAA;AAAA;AAAA;AAAA,UAD2B,CAA7B;;AASA,WAAK,IAAM,CAACpB,EAAD,EAAIqB,aAAJ,CAAX,IAAiCH,cAAc,CAACI,OAAf,EAAjC,EAA2D;AACzDV,QAAAA,QAAQ,CAACZ,EAAD,CAAR,CAAYuB,UAAZ,GAAyBF,aAAa,CAAChB,GAAd,CACtBmB,KAAD,IAAW,wCAAwCA,KAAK,CAACC,SADlC,CAC4C;AAD5C,SAAzB;AAGD,OA3BC,CA4BF;;;AACA,kCAAab,QAAb,EAAuBX,IAAvB,CAA4Bb,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAA5B;AACD,KA9BD,CA8BE,OAAOF,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA;AACD;AACF,G;;;;AACD,CAAC,YAAY;AACXT,EAAAA,gBAAgB;AAChB+B,EAAAA,mBAAmB;AACpB,CAHD","sourcesContent":["import \"dotenv/config\";\nimport setGenres from \"../db/seedGenres\";\nimport setMovies from \"../db/seedMovies\";\nimport setTestUsers from \"../db/seedTestUser\";\nimport setTopMovies from \"../db/seedTopMovies\";\nimport axios from \"axios\";\n\nasync function initializeGenres() {\n  try {\n    const output = await axios.get(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${process.env.tmdbKey}&language=en-US`\n    );\n    // console.log(output.data.genres)\n    setGenres(output.data.genres);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n//two api calls to different tmdb api routes are needed to gather all the info of a movie needed\nasync function initializeMonthlyMovies() {\n  async function fetchAdditionalMovieInfo(id) {\n    const output = await axios.get(`\n    https://api.themoviedb.org/3/movie/${id}?api_key=${process.env.tmdbKey}&language=en-US\n    `);\n    return output.data;\n  }\n  //FIRST API CALL\n  try {\n    let pageNumber = 1;\n    const movies = [];\n    const output = await axios.get(\n      `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.tmdbKey}&language=en-US&sort_by=popularity.desc&include_adult=true&include_video=false&page=${pageNumber}&primary_release_date.gte=2020-05-12&primary_release_date.lte=2020-06-12`\n    );\n    //find total pages of results that is available on tmdb\n    let totalPages = output.data[\"total_pages\"];\n    //push the movies obj on first page to an array\n    for (let movie of output.data.results) {\n      movies.push(movie);\n    }\n\n    //call the rest of the result pages and push to movies array\n    const moviesAfterPageOne = [];\n    for (let i = 2; i <= totalPages; i++) {\n      moviesAfterPageOne.push(\n        axios\n          .get(\n            `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.tmdbKey}&language=en-US&sort_by=popularity.desc&include_adult=true&include_video=false&page=${i}&primary_release_date.gte=2020-05-12&primary_release_date.lte=2020-06-12`\n          )\n          .then((output) => {\n            for (let movie of output.data.results) {\n              movies.push(movie);\n            }\n          })\n      );\n    }\n    await Promise.allSettled(moviesAfterPageOne);\n    const movieObjs = [];\n    //Once all basic movie info is aquired from tmdb, get additional info such as production company from tmdb api (details)\n    //SECOND API CALL\n    Promise.allSettled(\n      movies.map((movie) =>\n        fetchAdditionalMovieInfo(movie.id).then((additionalInfo) => ({\n          ...movie,\n          ...additionalInfo,\n        }))\n      )\n    ).then((movies) => {\n      for (let movie of movies) {\n        movieObjs.push(movie.value);\n      }\n      //send the completed movie jsons to firebase\n      setMovies(movieObjs);\n    });\n\n    // setMovies(output.data.results);\n  } catch (e) {\n    console.log(e);\n  }\n}\nasync function initializeUsers() {\n  await setTestUsers();\n  console.log(\"Test users set!\");\n}\nasync function initializeTopMovies() {\n  const topMoviesPromise = [];\n  for (let i = 1; i <= 5; i++) {\n    topMoviesPromise.push(\n      axios.get(\n        `https://api.themoviedb.org/3/movie/top_rated?api_key=${process.env.tmdbKey}&language=en-US&page=${i}`\n      )\n    );\n  }\n  try {\n    const output = await Promise.all(topMoviesPromise);\n    const movieArr = [];\n    for (const page of output) {\n      movieArr.push(\n        ...page.data.results.map((movie) => ({\n          movie_id: movie.id,\n          title: movie.title,\n          popularity: movie.popularity,\n          adult: movie.adult,\n        }))\n      );\n    }\n    //fetch posters of top rated movies and each movie has at least one poster\n    const imagesOfMovies = await Promise.all(\n      movieArr.map(async (movie) => {\n        const imagePathRespone = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movie.movie_id}/images?api_key=${process.env.tmdbKey}`\n        );\n        return imagePathRespone.data.backdrops;\n      })\n    );\n\n    for (const [i, imagesOfMovie] of imagesOfMovies.entries()) {\n      movieArr[i].image_path = imagesOfMovie.map(\n        (image) => \"https://image.tmdb.org/t/p/original\" + image.file_path //image.file_path is not the whole url\n      );\n    }\n    //store top movies array in database\n    setTopMovies(movieArr).then(console.log(\"top movies set\"));\n  } catch (e) {\n    console.log(e);\n    return;\n  }\n}\n(function () {\n  initializeGenres();\n  initializeTopMovies();\n})()\n"],"file":"initializeDb.js"}